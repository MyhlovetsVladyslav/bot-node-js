const { Pool } = require('pg');
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const PORT = process.env.PORT || 3000;
const url = process.env.RENDER_EXTERNAL_URL;

const token = process.env.BOT_TOKEN;
const channelId = process.env.CHANNEL_ID;

// --- Webhook or Polling ---
let bot;
if (url) {
  // Production: use webhook, –Ω–æ —Å–µ—Ä–≤–µ—Ä Express —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç!
  bot = new TelegramBot(token);
  bot.setWebHook(`${url}/bot${token}`, { allowed_updates: ["message", "callback_query"] });
  console.log(`Webhook set to: ${url}/bot${token}`);
} else {
  // Local: use polling
  bot = new TelegramBot(token, { polling: true });
  console.log('Bot started in polling mode');
}

app.use(bodyParser.json());

// Endpoint for Telegram webhook
app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// Healthcheck endpoint
app.get('/', (req, res) => {
  res.send('Bot is running!');
});

app.listen(PORT, () => {
  console.log(`Express server listening on port ${PORT}`);
});

const AWAITING_DESCRIPTION = 'awaiting_description';
const AWAITING_PHOTOS = 'awaiting_photos';

// Validation constants
const MIN_WORDS = 5;
const MAX_WORDS = 500;
const MAX_PHOTOS = 8;
const MAX_POST_AGE_MINUTES = 60 * 24; 

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.setMyCommands([
  { command: '/start', description: '–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º' },
  { command: '/cancel', description: '–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è' },
]);

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const pool = new Pool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: 5432, 
  ssl: true 
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø (–∫–ª—é—á: userId_mediaGroupId)
const mediaGroups = new Map();

const userCurrentPost = new Map(); // chatId -> postId

function sendMessageWithKeyboard(chatId, text, buttons, messageId = null) {
  const keyboard = { inline_keyboard: buttons.map(button => [{ text: button.text, callback_data: button.callback_data }]) };
  
  if (messageId) {
    return bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: keyboard
    });
  } else {
    return bot.sendMessage(chatId, text, {
      reply_markup: keyboard
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function getUserState(chatId) {
  const postId = userCurrentPost.get(chatId);
  const { rows } = await pool.query('SELECT * FROM posts WHERE id = $1', [postId]);
  const currentPost = rows[0];
  if (!currentPost) return null;

  return {
    ...currentPost,
    photos: currentPost.photos ? JSON.parse(currentPost.photos) : [],
    priceText: currentPost.price_text,
    username: currentPost.username
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function saveUserState(chatId, post) {
  const postId = userCurrentPost.get(chatId);
  await pool.query(
    `UPDATE posts SET description = $1, stage = $2, photos = $3 WHERE id = $4`,
    [post.description, post.stage, JSON.stringify(post.photos), postId]
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
async function hasActivePost(chatId) {
  const { rows } = await pool.query(
    'SELECT * FROM posts WHERE user_chat_id = $1 AND stage NOT IN ($2)',
    [chatId, 'published']
  );
  return rows.length > 0;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!msg.from.username) {
    await bot.sendMessage(chatId, '‚ö†Ô∏è –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (username) –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Telegram.\n\nüîÑ –ü—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è username, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start –∑–Ω–æ–≤—É.');
    return;
  }
  
  const activePost = await hasActivePost(chatId);
  if (activePost) {
    await bot.sendMessage(chatId, '‚ö†Ô∏è –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n\n‚úèÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.');
    return;
  }

  await pool.query('INSERT INTO users (chat_id, username) VALUES ($1, $2) ON CONFLICT (chat_id) DO UPDATE SET username = EXCLUDED.username', 
    [chatId, msg.from.username]);

  const menuButtons = [
    { text: 'üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è', callback_data: 'create_post' },
  ];
  await sendMessageWithKeyboard(chatId, 'üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', menuButtons);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  
  if (!query.from.username) {
    await bot.sendMessage(chatId, '‚ö†Ô∏è –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (username) –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Telegram.');
    await bot.answerCallbackQuery(query.id);
    return;
  }
  
  if (query.data === 'create_post') {
    const hasActive = await hasActivePost(chatId);
    if (hasActive) {
      await bot.editMessageText('‚ö†Ô∏è –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n\n‚úèÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }

    const username = query.from.username 
      ? `@${query.from.username}`
      : query.from.first_name 
      ? `${query.from.first_name}${query.from.last_name ? ' ' + query.from.last_name : ''}` 
      : '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';

    const result = await pool.query(
      `INSERT INTO posts (user_chat_id, stage, photos, description, username)
       VALUES ($1, $2, $3, $4, $5)
       RETURNING id`,
      [chatId, AWAITING_DESCRIPTION, '[]', '', username]
    );
    const postId = result.rows[0].id;
    userCurrentPost.set(chatId, postId);

    await saveUserState(chatId, {
      stage: AWAITING_DESCRIPTION,
      photos: [],
      description: '',
      username,
      photosFinished: false
    });
    await bot.editMessageText('üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–∏—Å –¥–ª—è –≤–∞—à–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\nüí° –û–ø–∏—à—ñ—Ç—å —Ç–æ–≤–∞—Ä, –π–æ–≥–æ —Å—Ç–∞–Ω, —Ü—ñ–Ω—É —Ç–∞ —É–º–æ–≤–∏ –ø—Ä–æ–¥–∞–∂—É.\n\n‚ùå –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /cancel', {
      chat_id: chatId,
      message_id: messageId
    });
  }
});

// Validation functions
function validateDescription(text) {
  const wordCount = text.trim().split(/\s+/).length;
  if (wordCount < MIN_WORDS) {
    return `–û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤: ${MIN_WORDS}. –í–∏ –≤–≤–µ–ª–∏: ${wordCount} —Å–ª—ñ–≤.`;
  }
  if (wordCount > MAX_WORDS) {
    return `–û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤: ${MAX_WORDS}. –í–∏ –≤–≤–µ–ª–∏: ${wordCount} —Å–ª—ñ–≤.`;
  }
  return null;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
bot.on('text', async (msg) => {
  const chatId = msg.chat.id;
  if (msg.text.startsWith('/')) return;

  const userState = await getUserState(chatId);
  const currentPost = userState;
  
  if (currentPost && currentPost.stage === AWAITING_DESCRIPTION) {
    const validationError = validateDescription(msg.text);
    if (validationError) {
      await bot.sendMessage(chatId, `‚ö†Ô∏è ${validationError}`);
      return;
    }

    currentPost.description = msg.text;
    currentPost.stage = AWAITING_PHOTOS;
    await saveUserState(chatId, currentPost);
    await bot.sendMessage(chatId, 
      '‚úÖ –î—è–∫—É—é –∑–∞ –æ–ø–∏—Å!\n\n' +
      'üì∏ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –¥–ª—è –≤–∞—à–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n' +
      `‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ: ${MAX_PHOTOS}\n` +
      '‚Ä¢ –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Ñ–æ—Ç–æ –æ–¥—Ä–∞–∑—É\n' +
      '‚Ä¢ –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏"', {
      reply_markup: {
        inline_keyboard: [[{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏', callback_data: 'finish_photos' }]]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.on('photo', async (msg) => {
  const chatId = msg.chat.id;
  const userState = await getUserState(chatId);
  const currentPost = userState;

  if (!currentPost || currentPost.stage !== AWAITING_PHOTOS) return;

  // –ï—Å–ª–∏ —Ñ–æ—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã
  if (msg.media_group_id) {
    const mediaGroupKey = `${chatId}_${msg.media_group_id}`;
    let mediaGroup = mediaGroups.get(mediaGroupKey);
    if (!mediaGroup) {
      mediaGroup = {
        photos: [],
        timer: null,
        chatId: chatId,
        processed: false
      };
      mediaGroups.set(mediaGroupKey, mediaGroup);
    }

    if (mediaGroup.processed) return;

    const photo = msg.photo[msg.photo.length - 1];
    mediaGroup.photos.push(photo.file_id);

    if (mediaGroup.timer) {
      clearTimeout(mediaGroup.timer);
    }

    mediaGroup.timer = setTimeout(async () => {
      mediaGroup.processed = true;

      if (mediaGroup.photos.length > MAX_PHOTOS - currentPost.photos.length) {
        await bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ì—Ä—É–ø–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–¥–∞–Ω–∞:\n\n' +
          `üì∏ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ —É –≥—Ä—É–ø—ñ: ${mediaGroup.photos.length}\n` +
          `üìç –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç: ${MAX_PHOTOS} —Ñ–æ—Ç–æ`);
        mediaGroups.delete(mediaGroupKey);
        return;
      }

      currentPost.photos.push(...mediaGroup.photos);
      await saveUserState(chatId, currentPost);

      await bot.sendMessage(chatId, 
        '‚úÖ –ì—Ä—É–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π –¥–æ–¥–∞–Ω–æ!\n\n' +
        `üì∏ –î–æ–¥–∞–Ω–æ —Ñ–æ—Ç–æ: ${mediaGroup.photos.length}\n` +
        `üìç –í—Å—å–æ–≥–æ —Ñ–æ—Ç–æ: ${currentPost.photos.length}/${MAX_PHOTOS}`);

      mediaGroups.delete(mediaGroupKey);
    }, 1000);

    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ
  if (currentPost.photos.length >= MAX_PHOTOS) {
    await bot.sendMessage(chatId, 
      '‚ö†Ô∏è –í–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π.\n\n' +
      `üì∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç: ${MAX_PHOTOS} —Ñ–æ—Ç–æ\n` +
      '‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–≤–µ—Ä—à–∏—Ç–∏" –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.');
    return;
  }

  const photo = msg.photo[msg.photo.length - 1];
  currentPost.photos.push(photo.file_id);
  await saveUserState(chatId, currentPost);
  
  await bot.sendMessage(chatId, 
    '‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –¥–æ–¥–∞–Ω–æ!\n\n' +
    `üì∏ –í—Å—å–æ–≥–æ —Ñ–æ—Ç–æ: ${currentPost.photos.length}/${MAX_PHOTOS}` +
    (currentPost.photos.length === MAX_PHOTOS ? '\n\n‚ö†Ô∏è –í–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏" –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.' : ''));
});

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
bot.on('callback_query', async (query) => {
  if (query.data === 'finish_photos') {
    const chatId = query.message.chat.id;
    const userState = await getUserState(chatId);
    const currentPost = userState;

    if (currentPost && currentPost.stage === AWAITING_PHOTOS) {
      if (currentPost.photos.length === 0) {
        await bot.sendMessage(chatId, '‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.');
        return;
      }

      const caption = `üì¢ –ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ ${currentPost.username}\n\n${currentPost.description}`;
      
      if (currentPost.photos.length === 1) {
        await bot.sendPhoto(channelId, currentPost.photos[0], { caption });
      } else {
        const mediaGroup = currentPost.photos.map((photo, index) => ({
          type: 'photo',
          media: photo,
          caption: index === 0 ? caption : undefined
        }));
        await bot.sendMediaGroup(channelId, mediaGroup);
      }

      currentPost.stage = 'published';
      await saveUserState(chatId, currentPost);
      await bot.sendMessage(chatId, 'üéâ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!\n\nüìù –©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
    }
  }
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
setInterval(async () => {
  try {
    const { rows } = await pool.query(
      `DELETE FROM posts
       WHERE stage != 'published'
         AND created_at < NOW() - INTERVAL '${MAX_POST_AGE_MINUTES} minutes'
       RETURNING id, user_chat_id`
    );
    for (const row of rows) {
      userCurrentPost.delete(row.user_chat_id);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.sendMessage(
        row.user_chat_id,
        '‚è∞ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —è–∫—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ \n\n /start'
      );
    }
    if (rows.length > 0) {
      console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${rows.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤`);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–µ –ø–æ—Å—Ç–æ–≤:', err);
  }
}, 60 * 1000);

bot.onText(/\/cancel/, async (msg) => {
  const chatId = msg.chat.id;
  const postId = userCurrentPost.get(chatId);

  if (!postId) {
    await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.');
    return;
  }

  // –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã, –µ—Å–ª–∏ –æ–Ω –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
  await pool.query(
    "DELETE FROM posts WHERE id = $1 AND stage != 'published'",
    [postId]
  );

  userCurrentPost.delete(chatId);

  await bot.sendMessage(chatId, '–í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start.');
});
